ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow all authenticated users to read comments" ON public.comments FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow all authenticated users to read posts" ON public.posts FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow authenticated users to comment" ON public.comments FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow authenticated users to create posts" ON public.posts FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow authenticated users to insert comments" ON public.comments FOR INSERT TO authenticated WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Allow authenticated users to insert posts" ON public.posts FOR INSERT TO authenticated WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Allow authenticated users to insert their own profile" ON public.profiles FOR INSERT TO authenticated WITH CHECK ((auth.uid() = id));
CREATE POLICY "Allow authenticated users to insert their own profile" ON public.users FOR INSERT TO authenticated WITH CHECK ((auth.uid() = id));
CREATE POLICY "Allow authenticated users to manage their friendships" ON public.friendships TO authenticated USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Allow authenticated users to read comments" ON public.comments FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow authenticated users to read tasks" ON public.tasks FOR SELECT USING ((auth.role() = 'authenticated'::text));
CREATE POLICY "Allow authenticated users to read their friendships" ON public.friendships FOR SELECT TO authenticated USING (((auth.uid() = user_id) OR (auth.uid() = friend_id)));
CREATE POLICY "Allow authenticated users to read their own profile" ON public.profiles FOR SELECT TO authenticated USING ((auth.uid() = id));
CREATE POLICY "Allow authenticated users to update their own profile" ON public.profiles FOR UPDATE USING ((auth.uid() = id));
CREATE POLICY "Allow challenge creators to manage tasks" ON public.tasks USING ((EXISTS ( SELECT 1
CREATE POLICY "Allow group member reads" ON public.private_groups FOR SELECT TO authenticated USING ((auth.uid() IN ( SELECT group_members.user_id
CREATE POLICY "Allow lobby member reads" ON public.challenge_lobbies FOR SELECT TO authenticated USING ((challenge_id IN ( SELECT user_challenges.challenge_id
CREATE POLICY "Allow public challenge reads" ON public.challenges FOR SELECT TO authenticated USING ((is_public = true));
CREATE POLICY "Allow public channel reads" ON public.social_channels FOR SELECT TO authenticated USING ((is_public = true));
CREATE POLICY "Allow public read of public fields" ON public.profiles FOR SELECT TO authenticated, anon USING ((first_name_public OR last_name_public OR username_public OR phone_number_public OR address_public OR participates_in_challenges_public OR gender_public OR dob_public OR height_public OR weight_public OR body_fat_percentage_public OR profile_photo_url_public OR bmi_public OR bmr_public OR (id = auth.uid())));
CREATE POLICY "Allow unauthenticated users to read all posts" ON public.posts FOR SELECT TO anon USING (true);
CREATE POLICY "Allow user insert" ON public.users FOR INSERT TO authenticated WITH CHECK ((auth.uid() = id));
CREATE POLICY "Allow username lookup for login" ON public.users FOR SELECT TO anon USING ((username IS NOT NULL));
CREATE POLICY "Allow users to manage own blocks" ON public.blocks TO authenticated USING ((blocker_id = auth.uid()));
CREATE POLICY "Allow users to manage own follows" ON public.follows TO authenticated USING ((follower_id = auth.uid()));
CREATE POLICY "Allow users to manage own friends" ON public.friends TO authenticated USING ((user_id = auth.uid()));
CREATE POLICY "Allow users to read their own profile" ON public.users FOR SELECT TO authenticated USING ((auth.uid() = id));
CREATE POLICY "Allow users to update own profile" ON public.profiles FOR UPDATE TO authenticated USING ((id = auth.uid()));
CREATE POLICY "Allow users to update their own profile" ON public.users FOR UPDATE TO authenticated USING ((auth.uid() = id)) WITH CHECK ((auth.uid() = id));
CREATE POLICY "Authenticated users can create challenges" ON public.challenges FOR INSERT TO authenticated WITH CHECK ((auth.uid() = created_by));
CREATE POLICY "Authenticated users can delete their logs" ON public.user_challenge_logs FOR DELETE USING (((auth.role() = 'authenticated'::text) AND (user_id = auth.uid())));
CREATE POLICY "Authenticated users can log progress" ON public.user_challenge_logs FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY "Authenticated users can manage challenges" ON public.challenges USING ((auth.role() = 'authenticated'::text));
CREATE POLICY "Authenticated users can update their logs" ON public.user_challenge_logs FOR UPDATE USING (((auth.role() = 'authenticated'::text) AND (user_id = auth.uid())));
CREATE POLICY "Challenge posts for participants" ON public.posts FOR SELECT TO authenticated USING ((challenge_id IN ( SELECT challenge_participants.challenge_id
CREATE POLICY "General posts are public" ON public.posts FOR SELECT TO authenticated, anon USING ((challenge_id IS NULL));
CREATE POLICY "Public challenges are readable by everyone" ON public.challenges FOR SELECT USING ((is_private = false));
CREATE POLICY "Stories are viewable by everyone" ON public.stories FOR SELECT USING (true);
CREATE POLICY "Story views are viewable by everyone" ON public.story_views FOR SELECT USING (true);
CREATE POLICY "Users can delete their own profile" ON public.profiles FOR DELETE USING ((auth.uid() = id));
CREATE POLICY "Users can delete their own stories" ON public.stories FOR DELETE TO authenticated USING ((auth.uid() = user_id));
CREATE POLICY "Users can insert their own profile" ON public.profiles FOR INSERT WITH CHECK ((auth.uid() = id));
CREATE POLICY "Users can insert their own stories" ON public.stories FOR INSERT TO authenticated WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can insert their own story views" ON public.story_views FOR INSERT TO authenticated WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can insert their profile" ON public.profiles FOR INSERT TO authenticated WITH CHECK ((id = auth.uid()));
CREATE POLICY "Users can insert their profile with unique username" ON public.profiles FOR INSERT TO authenticated WITH CHECK (((id = auth.uid()) AND (NOT (EXISTS ( SELECT 1
CREATE POLICY "Users can read their own whispers" ON public.whispers FOR SELECT TO authenticated USING ((recipient_id = auth.uid()));
CREATE POLICY "Users can send whispers" ON public.whispers FOR INSERT TO authenticated WITH CHECK ((sender_id = auth.uid()));
CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING ((auth.uid() = id));
CREATE POLICY "Users can update their own stories" ON public.stories FOR UPDATE TO authenticated USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own whispers" ON public.whispers FOR UPDATE TO authenticated USING ((recipient_id = auth.uid()));
CREATE POLICY "Users can update their profile" ON public.profiles FOR UPDATE TO authenticated USING ((id = auth.uid())) WITH CHECK ((id = auth.uid()));
CREATE POLICY "Users can update their profile with unique username" ON public.profiles FOR UPDATE TO authenticated USING ((id = auth.uid())) WITH CHECK (((id = auth.uid()) AND (NOT (EXISTS ( SELECT 1
CREATE POLICY "Users can view profiles" ON public.profiles FOR SELECT TO authenticated USING (true);
CREATE POLICY "Users can view their own profile" ON public.profiles FOR SELECT USING ((auth.uid() = id));
CREATE POLICY "View public challenges or private if participant" ON public.challenges FOR SELECT TO authenticated USING ((is_public OR (EXISTS ( SELECT 1
ALTER TABLE public.blocks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.challenge_lobbies ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.challenges ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.follows ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.friends ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.friendships ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.group_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.private_groups ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.social_channels ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.stories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.story_views ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_challenge_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_challenges ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.whispers ENABLE ROW LEVEL SECURITY;
ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated uploads to profile_photos" ON storage.objects FOR INSERT TO authenticated WITH CHECK (((bucket_id = 'profile_photos'::text) AND (auth.uid() = owner)));
CREATE POLICY "Allow authenticated users to upload 1ps738_0" ON storage.objects FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY "Allow authenticated users to upload to challenge-covers" ON storage.objects FOR INSERT WITH CHECK (((bucket_id = 'challenge-covers'::text) AND (auth.role() = 'authenticated'::text)));
CREATE POLICY "Allow public read access to challenge-covers" ON storage.objects FOR SELECT USING ((bucket_id = 'challenge-covers'::text));
CREATE POLICY "Allow public read access to media 1ps738_0" ON storage.objects FOR SELECT USING (true);
CREATE POLICY "Allow public reads from profile_photos" ON storage.objects FOR SELECT USING ((bucket_id = 'profile_photos'::text));
CREATE POLICY "Authenticated users can read media" ON storage.objects FOR SELECT TO authenticated USING (((bucket_id = 'media'::text) AND (auth.role() = 'authenticated'::text)));
CREATE POLICY "Authenticated users can read task-media" ON storage.objects FOR SELECT TO authenticated USING (((bucket_id = 'task-media'::text) AND (auth.role() = 'authenticated'::text)));
CREATE POLICY "Authenticated users can upload to media" ON storage.objects FOR INSERT TO authenticated WITH CHECK (((bucket_id = 'media'::text) AND (auth.role() = 'authenticated'::text)));
CREATE POLICY "Authenticated users can upload to task-media" ON storage.objects FOR INSERT TO authenticated WITH CHECK (((bucket_id = 'task-media'::text) AND (auth.role() = 'authenticated'::text)));
CREATE POLICY "Users can upload their own profile photo" ON storage.objects FOR INSERT WITH CHECK (((bucket_id = 'profile_photos'::text) AND (owner = auth.uid())));
CREATE POLICY "Users can view their own profile photo" ON storage.objects FOR SELECT USING (((bucket_id = 'profile_photos'::text) AND (owner = auth.uid())));
ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;
ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;
ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;
ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;
CREATE POLICY simple_test ON storage.objects FOR SELECT USING (true);
